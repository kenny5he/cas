task outputSpotbugsReports(description: "Display Spotbugs output") {
    doFirst {
        def main = spotbugsMain.reports.findByName("XML").destination
        printSpotbugsReportToConsole(main)
        def test = spotbugsTest.reports.findByName("XML").destination
        printSpotbugsReportToConsole(test)
    }
}

def printSpotbugsReportToConsole(File file) {
    logger.debug "Reviewing file $file"
    if (file.exists() && file.length() > 0) {
        logger.debug "Processing found file $file"
        def slurper = new XmlSlurper().parse(file)
        def bugsFound = slurper.BugInstance.size()
        if (bugsFound > 0) {
            println "*********************************\nFound Spotbugs rule violation(s):\n"
            slurper.BugInstance.each { bug ->
                println "*********************************"
                println "Bug (" + bug.@abbrev + "): " + bug.@type + " [" + bug.@priority + "-" + bug.@rank + "] @ category " + bug.@category
                bug.Class.each { clz ->
                    println "\tClass: " + clz.@classname
                    clz.SourceLine.each { line ->
                        println "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Source Path: [" + line.@sourcepath + "], Source File: [" + line.@sourcefile + "]"
                    }
                }
                println "\t----------------------METHOD-----------------------------"
                bug.Method.each { md ->
                    println "\tMethod: " + md.@name + " [static: " + md.@isStatic + "]"
                    println "\tSignature: " + md.@signature
                    md.SourceLine.each { line ->
                        println "\tStart Line: " + line.@start + ", End Line: " + line.@end
                    }
                }
                println "\t-------------------SOURCE LINE---------------------------"
                bug.SourceLine.each { line ->
                    println "\tStart Line: " + line.@start + ", End Line: " + line.@end + ", Class: [" + line.@classname + "]"
                }
            }
            def msg = "\n$bugsFound Spotbugs rule violation(s) were found. See the report at: $file"
            println msg
            if (!Boolean.getBoolean("ignoreFindbugsFailures")) {
                throw new GradleException(msg)
            }
        } else {
            logger.debug "$file contains no bug instances"
        }
    } else {
        println "$file does not exist"
    }
}
